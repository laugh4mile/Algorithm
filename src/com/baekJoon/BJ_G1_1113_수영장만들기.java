package com.baekJoon;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BJ_G1_1113_수영장만들기 {
    static BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer tokens;
    static int R,C, map[][];
    static boolean isVisited[][];

    public static void main(String[] args) throws IOException {
        int answer = 0;

        input = new BufferedReader(new StringReader(src2));
        tokens = new StringTokenizer(input.readLine());
        R = Integer.parseInt(tokens.nextToken());
        C = Integer.parseInt(tokens.nextToken());
        if(R < 3 || C < 3) {
            System.out.println(0);
            return;
        }
        int [][]origin = new int[R][C];
        map = new int[R][C];
        int maxHeight = 0;
        for(int r=0; r<R; r++){
            String line = input.readLine();
            for(int c=0; c<C; c++){
                origin[r][c] = line.charAt(c) -'0';
                map[r][c] = line.charAt(c) -'0';
                if(origin[r][c] > maxHeight){
                    maxHeight = origin[r][c];
                }
            }
        }

        for(int h=1; h<=maxHeight; h++){
            isVisited = new boolean[R][C];
            for(int r=1; r<R-1; r++){
                for(int c=1; c<C-1; c++){
                    if(map[r][c] == h && !isVisited[r][c]){
                        isVisited[r][c] = true;
                        bfs(h,r,c);
                    }
                }
            }
        }

        for(int r=1; r<R-1; r++){
            for(int c=1; c<C-1; c++){
                answer += map[r][c] - origin[r][c];
            }
        }

        System.out.println(answer);
    }

    private static void bfs(int h, int r, int c) { // 물이 밖으로 새는지. 안샌다면 나보다 큰놈중에 젤작은놈을 찾는다.
        Queue<Node> queue = new LinkedList<>();
        Queue<Node> path = new LinkedList<>();
        queue.offer(new Node(r, c));
        path.offer(new Node(r, c));
        boolean flag = false;
        int minHeight = Integer.MAX_VALUE;

        while(!queue.isEmpty()){
            Node front = queue.poll();
            if(front.r == 0 || front.c == 0 || front.r == R-1 || front.c == C-1) { // 물샌다!!
                flag = true;
            }

            for(int d=0; d<4; d++){
                int nr = front.r + dr[d];
                int nc = front.c + dc[d];

                if(isIn(nr,nc) && !isVisited[nr][nc]){
                    if(map[nr][nc] <= h){
                        isVisited[nr][nc] = true;
                        queue.offer(new Node(nr, nc));
                        path.offer(new Node(nr, nc));
                    }else{
                        if(minHeight > map[nr][nc]){
                            minHeight = map[nr][nc];
                        }
                    }
                }
            }
        }
        if(flag) return;

        while(!path.isEmpty()){
            Node front = path.poll();
            map[front.r][front.c] = minHeight;
        }
    }

    static int dr[] = {0,0,-1,1};
    static int dc[] = {-1,1,0,0};

    static class Node{
        int r;
        int c;

        public Node(int r, int c) {
            this.r = r;
            this.c = c;
        }
    }

    static boolean isIn(int r, int c){
        return (r>=0 && c>=0 && r<R && c<C);
    }
    static String src =
            "9 13\n" +
                    "1111111111111\n" +
                    "1555555555551\n" +
                    "1511111111151\n" +
                    "1511199911151\n" +
                    "1511192911151\n" +
                    "1511199911151\n" +
                    "1511111111151\n" +
                    "1555555555551\n" +
                    "1111111111111";
    static String src1 =
            "50 50\n" +
            "99999999999999999999999999999999999999999999999999\n" +
            "91234567891234567891234567891234567891234567891239\n" +
            "92234567892234567892234567892234567892234567892239\n" +
            "93334567893334567893334567893334567893334567893339\n" +
            "94444567894444567894444567894444567894444567894449\n" +
            "95555567895555567895555567895555567895555567895559\n" +
            "96666667896666667896666667896666667896666667896669\n" +
            "97777777897777777897777777897777777897777777897779\n" +
            "98888888898888888898888888898888888898888888898889\n" +
            "99999999999999999999999999999999999999999999999999\n" +
            "91234567891234567891234567891234567891234567891239\n" +
            "92234567892234567892234567892234567892234567892239\n" +
            "93334567893334567893334567893334567893334567893339\n" +
            "94444567894444567894444567894444567894444567894449\n" +
            "95555567895555567895555567895555567895555567895559\n" +
            "96666667896666667896666667896666667896666667896669\n" +
            "97777777897777777897777777897777777897777777897779\n" +
            "98888888898888888898888888898888888898888888898889\n" +
            "99999999999999999999999999999999999999999999999999\n" +
            "91234567891234567891234567891234567891234567891239\n" +
            "92234567892234567892234567892234567892234567892239\n" +
            "93334567893334567893334567893334567893334567893339\n" +
            "94444567894444567894444567894444567894444567894449\n" +
            "95555567895555567895555567895555567895555567895559\n" +
            "96666667896666667896666667896666667896666667896669\n" +
            "97777777897777777897777777897777777897777777897779\n" +
            "98888888898888888898888888898888888898888888898889\n" +
            "99999999999999999999999999999999999999999999999999\n" +
            "91234567891234567891234567891234567891234567891239\n" +
            "92234567892234567892234567892234567892234567892239\n" +
            "93334567893334567893334567893334567893334567893339\n" +
            "94444567894444567894444567894444567894444567894449\n" +
            "95555567895555567895555567895555567895555567895559\n" +
            "96666667896666667896666667896666667896666667896669\n" +
            "97777777897777777897777777897777777897777777897779\n" +
            "98888888898888888898888888898888888898888888898889\n" +
            "99999999999999999999999999999999999999999999999999\n" +
            "91234567891234567891234567891234567891234567891239\n" +
            "92234567892234567892234567892234567892234567892239\n" +
            "93334567893334567893334567893334567893334567893339\n" +
            "94444567894444567894444567894444567894444567894449\n" +
            "95555567895555567895555567895555567895555567895559\n" +
            "96666667896666667896666667896666667896666667896669\n" +
            "97777777897777777897777777897777777897777777897779\n" +
            "98888888898888888898888888898888888898888888898889\n" +
            "99999999999999999999999999999999999999999999999999\n" +
            "91234567891234567891234567891234567891234567891239\n" +
            "92234567892234567892234567892234567892234567892239\n" +
            "93334567893334567893334567893334567893334567893339\n" +
            "99999999999999999999999999999999999999999999999999";
    static String src2 =
            "50 50\n" +
            "99999999999999999999999999999999999999999999999999\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111119\n" +
            "91111111111111111111111111111111111111111111111129\n" +
            "91111111111111111111111111111111111111111111111239\n" +
            "91111111111111111111111111111111111111111111112349\n" +
            "91111111111111111111111111111111111111111111123459\n" +
            "91111111111111111111111111111111111111111111234569\n" +
            "91111111111111111111111111111111111111111112345679\n" +
            "91111111111111111111111111111111111111111123456789\n" +
            "99999999999999999999999999999999999999999999999999";
}
