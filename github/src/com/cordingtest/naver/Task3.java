package com.cordingtest.naver;

import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Task3 {

    private final static List<Character> LETTERS = IntStream.range('a', 'z' + 1).mapToObj(letter -> (char) letter).collect(Collectors.toList());

    public static void main(String[] args) {
        System.out.println(solution("asdf?asdf"));
        System.out.println(solution("rd?e?wg??"));
        System.out.println(solution("???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"));
        System.out.println(solution("ab?ac?"));
        System.out.println(solution("?"));
        System.out.println(solution("??"));
    }

    private static String solution(String riddle) {
        Random random = new Random();
        StringBuilder sb = new StringBuilder(riddle);
        long start = System.nanoTime();
        for (int i = 0; i < sb.length(); i++) {
            char letter = sb.charAt(i);
            if (letter == '?') {
                int size = LETTERS.size();
                if (sb.length() <= 1) {
                    sb.setCharAt(0, LETTERS.get(random.nextInt(size)));
                    break;
                }

                if (i == 0) {
                    int next = sb.charAt(i + 1);
                    sb.setCharAt(i, LETTERS.stream().filter(alphabet -> alphabet != next).collect(Collectors.toList()).get(random.nextInt(size - 1)));
                } else if (i == sb.length() - 1) {
                    int before = sb.charAt(i - 1);
                    sb.setCharAt(i, LETTERS.stream().filter(alphabet -> alphabet != before).collect(Collectors.toList()).get(random.nextInt(size - 1)));
                } else {
                    int next = sb.charAt(i + 1);
                    int before = sb.charAt(i - 1);
                    sb.setCharAt(i, LETTERS.stream().filter(alphabet -> alphabet != before && alphabet != next).collect(Collectors.toList()).get(random.nextInt(size - 2)));
                }
            } // 5133969
        }
        long end = System.nanoTime();
//        System.out.println(end - start);
        return sb.toString();
    }
}